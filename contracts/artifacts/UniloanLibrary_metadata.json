{
	"compiler": {
		"version": "0.6.6+commit.6c089d02"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "BASE",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ORACLE",
				"outputs": [
					{
						"internalType": "contract IUniswapOracleRouter",
						"name": "",
						"type": "IUniswapOracleRouter"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "UNI",
				"outputs": [
					{
						"internalType": "contract IUniswapV2Router02",
						"name": "",
						"type": "IUniswapV2Router02"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pair",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "calculateLiquidityToBurn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "collateral",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrow",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "ltv",
						"type": "uint256"
					}
				],
				"name": "quote",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "minOut",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pair",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "collateral",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrow",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "quoteMin",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "collateral",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrow",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "quoteOracle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pair",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "collateral",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "quoteSwap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {
				"calculateLiquidityToBurn(address,address,uint256)": {
					"params": {
						"amount": "the amount of asset required as output "
					},
					"returns": {
						"_0": "the amount of liquidity to burn"
					}
				},
				"quote(address,address,uint256,uint256,uint256)": {
					"params": {
						"amount": "the amount of collateral being provided",
						"borrow": "the asset being borrowed",
						"collateral": "the asset being used as collateral"
					},
					"returns": {
						"minOut": "the minimum amount of liquidity to borrow"
					}
				},
				"quoteMin(address,address,address,uint256)": {
					"params": {
						"amount": "the amount of collateral being provided",
						"borrow": "the asset being borrowed",
						"collateral": "the asset being used as collateral"
					},
					"returns": {
						"amountOut": "the amount of liquidity to borrow"
					}
				},
				"quoteOracle(address,address,uint256)": {
					"params": {
						"amount": "the amount of collateral being provided",
						"borrow": "the asset being borrowed",
						"collateral": "the asset being used as collateral"
					},
					"returns": {
						"amountOut": "the amount of liquidity to borrow"
					}
				},
				"quoteSwap(address,address,uint256)": {
					"params": {
						"amount": "the amount of collateral being provided",
						"collateral": "the asset being sold"
					},
					"returns": {
						"amountOut": "the output of the trade"
					}
				}
			}
		},
		"userdoc": {
			"methods": {
				"calculateLiquidityToBurn(address,address,uint256)": {
					"notice": "calculates the amount of liquidity to burn to get the amount of asset"
				},
				"quote(address,address,uint256,uint256,uint256)": {
					"notice": "Provides a quote of how much output can be expected given the inputs"
				},
				"quoteMin(address,address,address,uint256)": {
					"notice": "Provides a minimum quote of quoteSwap and quote"
				},
				"quoteOracle(address,address,uint256)": {
					"notice": "Provides a quote of how much output can be expected given the inputs unadjusted for fee"
				},
				"quoteSwap(address,address,uint256)": {
					"notice": "Provides a quote of how much output can be expected if a trade were to be executed"
				}
			}
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/contracts/Uniloan.sol": "UniloanLibrary"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/contracts/Uniloan.sol": {
			"keccak256": "0xe446e7132f4d6bc37cc86f1e3b932f1b1d9b092aeb57c1f4f3595757980786c7",
			"urls": [
				"bzz-raw://d5f53e4a38a683a663db65983110c2900fc0aa1db588c583eef3364a136603cf",
				"dweb:/ipfs/QmZWhNGbvbiWwY2PW1deacxawM5yYLuCCbYCMhuGJniCzk"
			]
		}
	},
	"version": 1
}